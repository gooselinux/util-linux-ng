diff -up util-linux-ng-2.17.2/include/blkdev.h.kzak util-linux-ng-2.17.2/include/blkdev.h
--- util-linux-ng-2.17.2/include/blkdev.h.kzak	2010-03-22 09:05:42.000000000 +0100
+++ util-linux-ng-2.17.2/include/blkdev.h	2010-07-12 10:51:29.000000000 +0200
@@ -44,6 +44,11 @@
 #define BLKPBSZGET _IO(0x12,123)
 #endif
 
+#ifndef FIFREEZE
+#define FIFREEZE   _IOWR('X', 119, int)    /* Freeze */
+#define FITHAW     _IOWR('X', 120, int)    /* Thaw */
+#endif
+
 #ifndef HDIO_GETGEO
 # ifdef __linux__
 #  define HDIO_GETGEO 0x0301
diff -up util-linux-ng-2.17.2/sys-utils/fsfreeze.8.kzak util-linux-ng-2.17.2/sys-utils/fsfreeze.8
--- util-linux-ng-2.17.2/sys-utils/fsfreeze.8.kzak	2010-07-12 10:51:43.000000000 +0200
+++ util-linux-ng-2.17.2/sys-utils/fsfreeze.8	2010-07-12 10:51:43.000000000 +0200
@@ -0,0 +1,75 @@
+.\" -*- nroff -*-
+.TH FSFREEZE 8 "May 2010"
+.SH NAME
+fsfreeze \- suspend access to an filesystem (Linux Ext3/4, ReiserFS, JFS, XFS).
+.SH SYNOPSIS
+.B fsfreeze
+.RB \-f
+.I mountpoint
+
+.B fsfreeze
+.RB \-u
+.I mountpoint
+
+.SH DESCRIPTION
+.B fsfreeze
+suspends and resumes access to an filesystem
+.PP
+.B fsfreeze
+halts new access to the filesystem and creates a stable image on disk.
+.B fsfreeze
+is intended to be used with hardware RAID devices that support the creation 
+of snapshots.
+.PP
+.B fsfreeze
+is unncessary for
+.B device-mapper
+devices. The device-mapper (and LVM)
+automatically freezes filesystem on the device when a snapshot creation is requested.
+For more details see the
+.BR dmsetup (8)
+man page.
+.PP
+The
+.I mount-point
+argument is the pathname of the directory where the filesystem
+is mounted.
+The filesystem must be mounted to be frozen (see
+.BR mount (8)).
+.SH OPTIONS
+.IP "\fB\-h, \-\-help\fP"
+Print help and exit.
+.IP "\fB\-f, \-\-freeze\fP"
+This option requests the specified a filesystem to be frozen from new
+modifications.  When this is selected, all ongoing transactions in the
+filesystem are allowed to complete, new write system calls are halted, other
+calls which modify the filesystem are halted, and all dirty data, metadata, and
+log information are written to disk.  Any process attempting to write to the
+frozen filesystem will block waiting for the filesystem to be unfrozen.
+
+Note that even after freezing, the on-disk filesystem can contain
+information on files that are still in the process of unlinking.
+These files will not be unlinked until the filesystem is unfrozen
+or a clean mount of the snapshot is complete.
+.IP "\fB\-u, \-\-unfreeze\fP
+This option is used to un-freeze the filesystem and allow operations to
+continue.  Any filesystem modifications that were blocked by the freeze are
+unblocked and allowed to complete.
+.SH AUTHOR
+.PP
+Written by Hajime Taira.
+.SH NOTES
+.PP
+This man page based on xfs_freeze.
+One of
+.B \-f
+or
+.B \-u
+must be supplied to
+.BR fsfreeze .
+.SH SEE ALSO
+.BR mount (8)
+.SH AVAILABILITY
+The fsfreeze command is part of the util-linux-ng package and is available from
+ftp://ftp.kernel.org/pub/linux/utils/util-linux-ng/.
+
diff -up util-linux-ng-2.17.2/sys-utils/fsfreeze.c.kzak util-linux-ng-2.17.2/sys-utils/fsfreeze.c
--- util-linux-ng-2.17.2/sys-utils/fsfreeze.c.kzak	2010-07-12 10:51:43.000000000 +0200
+++ util-linux-ng-2.17.2/sys-utils/fsfreeze.c	2010-07-12 10:51:43.000000000 +0200
@@ -0,0 +1,132 @@
+/*
+ * fsfreeze.c -- Filesystem freeze/unfreeze IO for Linux
+ *
+ * Copyright (C) 2010 Hajime Taira <htaira@redhat.com>
+ *                    Masatake Yamato <yamato@redhat.com>
+ *
+ * This program is free software.  You can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation: either version 1 or
+ * (at your option) any later version.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <fcntl.h>
+#include <linux/fs.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <getopt.h>
+#include <err.h>
+
+#include "blkdev.h"
+#include "nls.h"
+#include "c.h"
+
+static int freeze_f(int fd)
+{
+	return ioctl(fd, FIFREEZE, 0);
+}
+
+static int unfreeze_f(int fd)
+{
+	return ioctl(fd, FITHAW, 0);
+}
+
+static void __attribute__((__noreturn__)) usage(FILE *out)
+{
+	fprintf(out, _("Usage: %s [options] <mount point>\n\nOptions:\n"),
+			program_invocation_short_name);
+
+	fprintf(out, _(
+		" -h, --help          this help\n"
+		" -f, --freeze        freeze the filesystem\n"
+		" -u, --unfreeze      unfreeze the filesystem\n"));
+
+	fprintf(out, _("\nFor more information see fsfreeze(8).\n"));
+
+	exit(out == stderr ? EXIT_FAILURE : EXIT_SUCCESS);
+}
+
+int main(int argc, char **argv)
+{
+	int fd = -1, c;
+	int freeze = -1, rc = EXIT_FAILURE;
+	char *path;
+	struct stat sb;
+
+	struct option longopts[] = {
+	    { "help",      0, 0, 'h' },
+	    { "freeze",    0, 0, 'f' },
+	    { "unfreeze",  0, 0, 'u' },
+	    { NULL,        0, 0, 0 }
+	};
+
+	setlocale(LC_ALL, "");
+	bindtextdomain(PACKAGE, LOCALEDIR);
+	textdomain(PACKAGE);
+
+	while ((c = getopt_long(argc, argv, "hfu", longopts, NULL)) != -1) {
+		switch(c) {
+		case 'h':
+			usage(stdout);
+			break;
+		case 'f':
+			freeze = TRUE;
+			break;
+		case 'u':
+			freeze = FALSE;
+			break;
+		default:
+			usage(stderr);
+			break;
+		}
+	}
+
+	if (freeze == -1)
+		errx(EXIT_FAILURE, _("no action specified"));
+	if (optind == argc)
+		errx(EXIT_FAILURE, _("no filename specified"));
+	path = argv[optind++];
+
+	if (optind != argc) {
+		warnx(_("unexpected number of arguments"));
+		usage(stderr);
+	}
+
+	fd = open(path, O_RDONLY);
+	if (fd < 0)
+		err(EXIT_FAILURE, _("%s: open failed"), path);
+
+	if (fstat(fd, &sb) == -1) {
+		warn(_("%s: fstat failed"), path);
+		goto done;
+	}
+
+	if (!S_ISDIR(sb.st_mode)) {
+		warnx(_("%s: is not a directory"), path);
+		goto done;
+	}
+
+	if (freeze) {
+		if (freeze_f(fd)) {
+			warn(_("%s: freeze failed"), path);
+			goto done;
+		}
+	} else {
+		if (unfreeze_f(fd)) {
+			warn(_("%s: unfreeze failed"), path);
+			goto done;
+		}
+	}
+
+	rc = EXIT_SUCCESS;
+done:
+	if (fd >= 0)
+		close(fd);
+	return rc;
+}
+
diff -up util-linux-ng-2.17.2/sys-utils/Makefile.am.kzak util-linux-ng-2.17.2/sys-utils/Makefile.am
--- util-linux-ng-2.17.2/sys-utils/Makefile.am.kzak	2010-07-12 10:45:42.000000000 +0200
+++ util-linux-ng-2.17.2/sys-utils/Makefile.am	2010-07-12 10:51:43.000000000 +0200
@@ -10,12 +10,12 @@ dist_man_MANS = flock.1 ipcrm.1 ipcs.1 i
 
 if LINUX
 bin_PROGRAMS += dmesg
-sbin_PROGRAMS += ctrlaltdel
+sbin_PROGRAMS += ctrlaltdel fsfreeze
 usrbin_exec_PROGRAMS += cytune setarch lscpu
 usrsbin_exec_PROGRAMS += ldattach tunelp rtcwake
 
 dist_man_MANS += dmesg.1 ctrlaltdel.8 cytune.8 setarch.8 \
-		ldattach.8 lscpu.1 tunelp.8 rtcwake.8
+		ldattach.8 lscpu.1 tunelp.8 rtcwake.8 fsfreeze.8
 endif
 
 lscpu_SOURCES = lscpu.c $(top_srcdir)/lib/cpuset.c
diff -up util-linux-ng-2.17.2/sys-utils/Makefile.in.kzak util-linux-ng-2.17.2/sys-utils/Makefile.in
--- util-linux-ng-2.17.2/sys-utils/Makefile.in.kzak	2010-07-12 10:52:14.000000000 +0200
+++ util-linux-ng-2.17.2/sys-utils/Makefile.in	2010-07-12 10:55:13.000000000 +0200
@@ -46,11 +46,11 @@ usrbin_exec_PROGRAMS = flock$(EXEEXT) ip
 usrsbin_exec_PROGRAMS = readprofile$(EXEEXT) $(am__EXEEXT_9) \
 	$(am__EXEEXT_10)
 @LINUX_TRUE@am__append_1 = dmesg
-@LINUX_TRUE@am__append_2 = ctrlaltdel
+@LINUX_TRUE@am__append_2 = ctrlaltdel fsfreeze
 @LINUX_TRUE@am__append_3 = cytune setarch lscpu
 @LINUX_TRUE@am__append_4 = ldattach tunelp rtcwake
 @LINUX_TRUE@am__append_5 = dmesg.1 ctrlaltdel.8 cytune.8 setarch.8 \
-@LINUX_TRUE@		ldattach.8 lscpu.1 tunelp.8 rtcwake.8
+@LINUX_TRUE@		ldattach.8 lscpu.1 tunelp.8 rtcwake.8 fsfreeze.8
 
 @BUILD_FALLOCATE_TRUE@am__append_6 = fallocate
 @BUILD_FALLOCATE_TRUE@am__append_7 = fallocate.1
@@ -96,7 +96,7 @@ am__installdirs = "$(DESTDIR)$(bindir)" 
 	"$(DESTDIR)$(usrbin_execdir)" "$(DESTDIR)$(usrsbin_execdir)" \
 	"$(DESTDIR)$(infodir)" "$(DESTDIR)$(man1dir)" \
 	"$(DESTDIR)$(man8dir)"
-@LINUX_TRUE@am__EXEEXT_3 = ctrlaltdel$(EXEEXT)
+@LINUX_TRUE@am__EXEEXT_3 = ctrlaltdel$(EXEEXT) fsfreeze$(EXEEXT)
 @BUILD_PIVOT_ROOT_TRUE@am__EXEEXT_4 = pivot_root$(EXEEXT)
 @BUILD_SWITCH_ROOT_TRUE@am__EXEEXT_5 = switch_root$(EXEEXT)
 @LINUX_TRUE@am__EXEEXT_6 = cytune$(EXEEXT) setarch$(EXEEXT) \
@@ -129,6 +129,9 @@ fallocate_LDADD = $(LDADD)
 flock_SOURCES = flock.c
 flock_OBJECTS = flock.$(OBJEXT)
 flock_LDADD = $(LDADD)
+fsfreeze_SOURCES = fsfreeze.c
+fsfreeze_OBJECTS = fsfreeze.$(OBJEXT)
+fsfreeze_LDADD = $(LDADD)
 ipcmk_SOURCES = ipcmk.c
 ipcmk_OBJECTS = ipcmk.$(OBJEXT)
 ipcmk_LDADD = $(LDADD)
@@ -201,14 +204,15 @@ AM_V_GEN = $(am__v_GEN_$(V))
 am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
 am__v_GEN_0 = @echo "  GEN   " $@;
 SOURCES = arch.c ctrlaltdel.c $(cytune_SOURCES) dmesg.c fallocate.c \
-	flock.c ipcmk.c ipcrm.c ipcs.c ldattach.c $(lscpu_SOURCES) \
-	pivot_root.c rdev.c readprofile.c renice.c rtcwake.c setarch.c \
-	setsid.c switch_root.c $(tunelp_SOURCES) unshare.c
-DIST_SOURCES = arch.c ctrlaltdel.c $(cytune_SOURCES) dmesg.c \
-	fallocate.c flock.c ipcmk.c ipcrm.c ipcs.c ldattach.c \
+	flock.c fsfreeze.c ipcmk.c ipcrm.c ipcs.c ldattach.c \
 	$(lscpu_SOURCES) pivot_root.c rdev.c readprofile.c renice.c \
 	rtcwake.c setarch.c setsid.c switch_root.c $(tunelp_SOURCES) \
 	unshare.c
+DIST_SOURCES = arch.c ctrlaltdel.c $(cytune_SOURCES) dmesg.c \
+	fallocate.c flock.c fsfreeze.c ipcmk.c ipcrm.c ipcs.c \
+	ldattach.c $(lscpu_SOURCES) pivot_root.c rdev.c readprofile.c \
+	renice.c rtcwake.c setarch.c setsid.c switch_root.c \
+	$(tunelp_SOURCES) unshare.c
 INFO_DEPS = $(srcdir)/ipc.info
 TEXINFO_TEX = $(top_srcdir)/config/texinfo.tex
 am__TEXINFO_TEX_DIR = $(top_srcdir)/config
@@ -249,8 +253,8 @@ NROFF = nroff
 MANS = $(dist_man_MANS) $(man_MANS)
 am__dist_noinst_DATA_DIST = flock.1 ipcrm.1 ipcs.1 ipcmk.1 renice.1 \
 	setsid.1 readprofile.1 dmesg.1 ctrlaltdel.8 cytune.8 setarch.8 \
-	ldattach.8 lscpu.1 tunelp.8 rtcwake.8 fallocate.1 pivot_root.8 \
-	switch_root.8 unshare.1 arch.1 rdev.8
+	ldattach.8 lscpu.1 tunelp.8 rtcwake.8 fsfreeze.8 fallocate.1 \
+	pivot_root.8 switch_root.8 unshare.1 arch.1 rdev.8
 DATA = $(dist_noinst_DATA)
 ETAGS = etags
 CTAGS = ctags
@@ -668,6 +672,9 @@ fallocate$(EXEEXT): $(fallocate_OBJECTS)
 flock$(EXEEXT): $(flock_OBJECTS) $(flock_DEPENDENCIES) 
 	@rm -f flock$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(flock_OBJECTS) $(flock_LDADD) $(LIBS)
+fsfreeze$(EXEEXT): $(fsfreeze_OBJECTS) $(fsfreeze_DEPENDENCIES) 
+	@rm -f fsfreeze$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(fsfreeze_OBJECTS) $(fsfreeze_LDADD) $(LIBS)
 ipcmk$(EXEEXT): $(ipcmk_OBJECTS) $(ipcmk_DEPENDENCIES) 
 	@rm -f ipcmk$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ipcmk_OBJECTS) $(ipcmk_LDADD) $(LIBS)
@@ -727,6 +734,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dmesg.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fallocate.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/flock.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fsfreeze.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ipcmk.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ipcrm.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ipcs.Po@am__quote@
