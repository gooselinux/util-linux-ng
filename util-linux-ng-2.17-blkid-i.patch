---
 misc-utils/blkid.8 |   27 +++++++--
 misc-utils/blkid.c |  153 ++++++++++++++++++++++++++++++++++++++---------------
 2 files changed, 135 insertions(+), 45 deletions(-)

--- util-linux-ng-2.17.2.orig/misc-utils/blkid.8
+++ util-linux-ng-2.17.2/misc-utils/blkid.8
@@ -47,6 +47,16 @@ blkid \- command\-line utility to locate
 .IR list ]
 .I device
 [\fIdevice\fR ...]
+.in -9
+
+.B blkid
+.RB -i
+.RB [ \-o
+.IR format ]
+.RB [ \-s
+.IR tag ]
+.I device
+[\fIdevice\fR ...]
 
 .SH DESCRIPTION
 The
@@ -79,6 +89,10 @@ devices which no longer exist.
 .B \-h
 Display a usage message and exit.
 .TP
+.B \-i
+Display I/O Limits (aka I/O topology) information. The 'export' output format is
+automatically enabled. This option could be used together with \fB-p\fR option.
+.TP
 .B \-l
 Look up one device that matches the search parameter specified using
 the
@@ -137,21 +151,26 @@ print the value of the tags
 .TP
 .B list
 print the devices in a user-friendly format, this output format is unsupported
-for low-level probing (\fB-p\fR)
+for low-level probing (\fB-p\fR or \fB-i\fR)
 .TP
 .B device
 print the device name only, this output format is always enabled for \fB-L\fR
 and \fB-U\fR options
 .TP
 .B udev
-vol_id compatible mode; usable in udev rules
+print key="value" pairs for easy import into the udev environment
+.TP
+.B export
+print key=value pairs for easy import into the environment.  This output format
+is automatically enabled when I/O Limits (\fB-i\fR option) are requested.
 .RE
 .TP
 .BI \-O " bytes"
-Probe at the given offset (only useful with \fB-p\fR).
+Probe at the given offset (only useful with \fB-p\fR). This option could be
+used together with \fB-i\fR option.
 .TP
 .BI \-p
-Switch to low-level probing mode (bypass cache)
+Switch to low-level superblock probing mode (bypass cache).
 .TP
 .BI \-s " tag"
 For each (specified) device, show only the tags that match
--- util-linux-ng-2.17.2.orig/misc-utils/blkid.c
+++ util-linux-ng-2.17.2/misc-utils/blkid.c
@@ -29,10 +29,14 @@ extern char *optarg;
 extern int optind;
 #endif
 
-#define OUTPUT_VALUE_ONLY	0x0001
-#define OUTPUT_DEVICE_ONLY	0x0002
-#define OUTPUT_PRETTY_LIST	0x0004
-#define OUTPUT_UDEV_LIST	0x0008
+#define OUTPUT_VALUE_ONLY	(1 << 1)
+#define OUTPUT_DEVICE_ONLY	(1 << 2)
+#define OUTPUT_PRETTY_LIST	(1 << 3)
+#define OUTPUT_UDEV_LIST	(1 << 4)
+#define OUTPUT_EXPORT_LIST	(1 << 5)
+
+#define LOWPROBE_TOPOLOGY	(1 << 1)
+#define LOWPROBE_SUPERBLOCKS	(1 << 2)
 
 #include <blkid.h>
 
@@ -56,13 +60,15 @@ static void usage(int error)
 		"  %1$s -L <label> | -U <uuid>\n\n"
 		"  %1$s [-c <file>] [-ghlLv] [-o format] [-s <tag>] \n"
 		"        [-t <token>] [-w <file>] [dev ...]\n\n"
-		"  %1$s -p [-O <offset>] [-S <size>] [-o format] <dev> [dev ...]\n\n"
+		"  %1$s -p [-s <tag>] [-O <offset>] [-S <size>]\n"
+		"        [-o format] <dev> [dev ...]\n\n"
+		"  %1$s -i [-s <tag>] [-o format] <dev> [dev ...]\n\n"
 		"Options:\n"
 		"  -c <file>   cache file (default: /etc/blkid/blkid.tab, /dev/null = none)\n"
 		"  -h          print this usage message and exit\n"
 		"  -g          garbage collect the blkid cache\n"
 		"  -o <format> output format; can be one of:\n"
-		"              value, device, list, udev or full; (default: full)\n"
+		"              value, device, list, udev, export or full; (default: full)\n"
 		"  -s <tag>    show specified tag(s) (default show all tags)\n"
 		"  -t <token>  find device with a specific token (NAME=value pair)\n"
 		"  -l          lookup the the first device with arguments specified by -t\n"
@@ -72,7 +78,8 @@ static void usage(int error)
 		"  -w <file>   write cache to different file (/dev/null = no write)\n"
 		"  <dev>       specify device(s) to probe (default: all devices)\n\n"
 		"Low-level probing options:\n"
-		"  -p          switch to low-level mode (bypass cache)\n"
+		"  -p          low-level superblocks probing (bypass cache)\n"
+		"  -i          gather information about I/O limits\n"
 		"  -S <bytes>  overwrite device size\n"
 		"  -O <bytes>  probe at the given offset\n"
 		"  -u <list>   filter by \"usage\" (e.g. -u filesystem,raid)\n"
@@ -235,6 +242,7 @@ static void pretty_print_dev(blkid_dev d
 static void print_udev_format(const char *name, const char *value, size_t sz)
 {
 	char enc[265], safe[256];
+	size_t namelen = strlen(name);
 
 	*safe = *enc = '\0';
 
@@ -257,6 +265,11 @@ static void print_udev_format(const char
 
 	/* TODO:  ID_PART_ENTRY_{UUID,NAME,FLAG} */
 
+	else if (namelen >= 15 && (
+		   !strcmp(name + (namelen - 12), "_SECTOR_SIZE") ||
+		   !strcmp(name + (namelen - 8), "_IO_SIZE") ||
+		   !strcmp(name, "ALIGNMENT_OFFSET")))
+			printf("ID_IOLIMIT_%s=%s\n", name, value);
 	else
 		printf("ID_FS_%s=%s\n", name, value);
 }
@@ -281,6 +294,12 @@ static void print_value(int output, int 
 	} else if (output & OUTPUT_UDEV_LIST) {
 		print_udev_format(name, value, valsz);
 
+	} else if (output & OUTPUT_EXPORT_LIST) {
+		fputs(name, stdout);
+		fputs("=", stdout);
+		safe_print(value, valsz);
+		fputs("\n", stdout);
+
 	} else {
 		if (num == 1 && devname)
 			printf("%s: ", devname);
@@ -296,6 +315,7 @@ static void print_tags(blkid_dev dev, ch
 	blkid_tag_iterate	iter;
 	const char		*type, *value, *devname;
 	int			num = 1;
+	static int		first = 1;
 
 	if (!dev)
 		return;
@@ -316,12 +336,22 @@ static void print_tags(blkid_dev dev, ch
 	while (blkid_tag_next(iter, &type, &value) == 0) {
 		if (show[0] && !has_item(show, type))
 			continue;
+
+		if (num == 1 && !first &&
+		    (output & (OUTPUT_UDEV_LIST | OUTPUT_EXPORT_LIST)))
+			/* add extra line between output from more devices */
+			fputc('\n', stdout);
+
 		print_value(output, num++, devname, value, type, strlen(value));
 	}
 	blkid_tag_iterate_end(iter);
 
-	if (num > 1 && !(output & (OUTPUT_VALUE_ONLY | OUTPUT_UDEV_LIST)))
-		printf("\n");
+	if (num > 1) {
+		if (!(output & (OUTPUT_VALUE_ONLY | OUTPUT_UDEV_LIST |
+						OUTPUT_EXPORT_LIST)))
+			printf("\n");
+		first = 0;
+	}
 }
 
 
@@ -402,27 +432,13 @@ done:
 	return rc;
 }
 
-static int lowprobe_device(blkid_probe pr, const char *devname,	char *show[],
-			int output, blkid_loff_t offset, blkid_loff_t size)
-{
-	const char *data;
-	const char *name;
-	int nvals = 0, n, num = 1;
-	size_t len;
-	int fd;
-	int rc = 0;
+static int lowprobe_superblocks(blkid_probe pr, int fd)
+ {
 	struct stat st;
-
-	fd = open(devname, O_RDONLY);
-	if (fd < 0) {
-		fprintf(stderr, "error: %s: %s\n", devname, strerror(errno));
-		return 2;
-	}
-	if (blkid_probe_set_device(pr, fd, offset, size))
-		goto done;
+	int rc;
 
 	if (fstat(fd, &st))
-		goto done;
+		return -1;
 
 	blkid_probe_enable_partitions(pr, 1);
 
@@ -435,11 +451,10 @@ static int lowprobe_device(blkid_probe p
 
 		rc = blkid_do_fullprobe(pr);
 		if (rc < 0)
-			goto done;	/* -1 = error, 1 = nothing, 0 = succes */
+			return rc;	/* -1 = error, 1 = nothing, 0 = succes */
 
 		if (blkid_probe_lookup_value(pr, "PTTYPE", NULL, NULL) == 0)
-			/* partition table detected */
-			goto print_vals;
+			return 0;	/* partition table detected */
 
 		/* small whole-disk is unpartitioned, probe for filesystems only */
 		blkid_probe_enable_partitions(pr, 0);
@@ -447,12 +462,53 @@ static int lowprobe_device(blkid_probe p
 
 	blkid_probe_enable_superblocks(pr, 1);
 
-	rc = blkid_do_safeprobe(pr);
+	return blkid_do_safeprobe(pr);
+}
+
+static int lowprobe_topology(blkid_probe pr)
+{
+	/* enable topology probing only */
+	blkid_probe_enable_topology(pr, 1);
+
+	blkid_probe_enable_superblocks(pr, 0);
+	blkid_probe_enable_partitions(pr, 0);
+
+	return blkid_do_fullprobe(pr);
+}
+
+static int lowprobe_device(blkid_probe pr, const char *devname,
+			int chain, char *show[], int output,
+			blkid_loff_t offset, blkid_loff_t size)
+{
+	const char *data;
+	const char *name;
+	int nvals = 0, n, num = 1;
+	size_t len;
+	int fd;
+	int rc = 0;
+	static int first = 1;
+
+	fd = open(devname, O_RDONLY);
+	if (fd < 0) {
+		fprintf(stderr, "error: %s: %s\n", devname, strerror(errno));
+		return 2;
+	}
+	if (blkid_probe_set_device(pr, fd, offset, size))
+		goto done;
+
+	if (chain & LOWPROBE_TOPOLOGY)
+		rc = lowprobe_topology(pr);
+	if (rc >= 0 && (chain & LOWPROBE_SUPERBLOCKS))
+		rc = lowprobe_superblocks(pr, fd);
 	if (rc < 0)
 		goto done;
-print_vals:
+
 	nvals = blkid_probe_numof_values(pr);
 
+	if (nvals && !first && output & (OUTPUT_UDEV_LIST | OUTPUT_EXPORT_LIST))
+		/* add extra line between output from devices */
+		fputc('\n', stdout);
+
 	if (output & OUTPUT_DEVICE_ONLY) {
 		printf("%s\n", devname);
 		goto done;
@@ -467,7 +523,10 @@ print_vals:
 		print_value(output, num++, devname, (char *) data, name, len);
 	}
 
-	if (nvals >= 1 && !(output & (OUTPUT_VALUE_ONLY | OUTPUT_UDEV_LIST)))
+	if (first)
+		first = 0;
+	if (nvals >= 1 && !(output & (OUTPUT_VALUE_ONLY |
+					OUTPUT_UDEV_LIST | OUTPUT_EXPORT_LIST)))
 		printf("\n");
 done:
 	if (rc == -2) {
@@ -537,7 +596,7 @@ int main(int argc, char **argv)
 
 	show[0] = NULL;
 
-	while ((c = getopt (argc, argv, "c:f:ghlL:o:O:ps:S:t:u:U:w:v")) != EOF)
+	while ((c = getopt (argc, argv, "c:f:ghilL:o:O:ps:S:t:u:U:w:v")) != EOF)
 		switch (c) {
 		case 'c':
 			if (optarg && !*optarg)
@@ -560,6 +619,9 @@ int main(int argc, char **argv)
 			search_value = strdup(optarg);
 			search_type = strdup("UUID");
 			break;
+		case 'i':
+			lowprobe |= LOWPROBE_TOPOLOGY;
+			break;
 		case 'l':
 			lookup++;
 			break;
@@ -575,6 +637,8 @@ int main(int argc, char **argv)
 				output_format = OUTPUT_PRETTY_LIST;
 			else if (!strcmp(optarg, "udev"))
 				output_format = OUTPUT_UDEV_LIST;
+			else if (!strcmp(optarg, "export"))
+				output_format = OUTPUT_EXPORT_LIST;
 			else if (!strcmp(optarg, "full"))
 				output_format = 0;
 			else {
@@ -588,7 +652,7 @@ int main(int argc, char **argv)
 			offset = strtoll(optarg, NULL, 10);
 			break;
 		case 'p':
-			lowprobe++;
+			lowprobe |= LOWPROBE_SUPERBLOCKS;
 			break;
 		case 's':
 			if (numtag + 1 >= sizeof(show) / sizeof(*show)) {
@@ -654,7 +718,7 @@ int main(int argc, char **argv)
 	}
 	err = 2;
 
-	if (eval == 0 && output_format & OUTPUT_PRETTY_LIST) {
+	if (eval == 0 && (output_format & OUTPUT_PRETTY_LIST)) {
 		if (lowprobe) {
 			fprintf(stderr, "The low-level probing mode does not "
 					"support 'list' output format\n");
@@ -674,21 +738,28 @@ int main(int argc, char **argv)
 					"requires a device\n");
 			exit(4);
 		}
+
+		/* automatically enable 'export' format for I/O Limits */
+		if (!output_format  && (lowprobe & LOWPROBE_TOPOLOGY))
+			output_format = OUTPUT_EXPORT_LIST;
+
 		pr = blkid_new_probe();
 		if (!pr)
 			goto exit;
 
-		blkid_probe_set_superblocks_flags(pr,
+		 if (lowprobe & LOWPROBE_SUPERBLOCKS) {
+			blkid_probe_set_superblocks_flags(pr,
 				BLKID_SUBLKS_LABEL | BLKID_SUBLKS_UUID |
 				BLKID_SUBLKS_TYPE | BLKID_SUBLKS_SECTYPE |
 				BLKID_SUBLKS_USAGE | BLKID_SUBLKS_VERSION);
 
-		if (fltr_usage &&
-		    blkid_probe_filter_superblocks_usage(pr, fltr_flag, fltr_usage))
-			goto exit;
+			if (fltr_usage && blkid_probe_filter_superblocks_usage(
+						pr, fltr_flag, fltr_usage))
+				goto exit;
+		 }
 
 		for (i = 0; i < numdev; i++)
-			err = lowprobe_device(pr, devices[i], show,
+			err = lowprobe_device(pr, devices[i], lowprobe, show,
 					output_format, offset, size);
 		blkid_free_probe(pr);
 	} else if (eval) {
